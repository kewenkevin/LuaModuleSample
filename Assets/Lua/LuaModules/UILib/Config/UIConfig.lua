--- 界面配置及其内部类
--- Generated by EmmyLua(https://github.com/EmmyLua)
---------------------------------------------------------------------------------------

---@class UIConfigBasic 基础配置
---@field orthographicSize number
---@field cullingMask number int型 maskValue
---@field orderOutCount number 唯一队列模式的界面只缓存数量，默认是1
---@field bindMode number 项目采用的绑定模式 默认使用自由模式 ，0 为只允许绑定，自动忽略代码中的moduleName；2 为只允许代码制定，忽略资源传来的luapath；1为自由模式介于两者之间
local UIConfigBasic = class("UIConfigBasic")

function UIConfigBasic:ctor()
    self.orthographicSize = 680
    self.cullingMask = 32
    self.orderOutCount = 1
    self.bindMode = 1
end

---@class UIConfigPath 路径配置
---@field assetPathPrefix string  UI使用的正交相机的size
---@field luaPathPrefix string
--[[
---@field luaBinderPrefix string
]]
---@field luaUIModulesPathPrefix string
local UIConfigPath = class("UIConfigPath")

function UIConfigPath:ctor()
    self.assetPathPrefix = "Assets/ResourceBuild/ResourcesAssets/Artist/UI/Pages/"
    self.luaPathPrefix = "UI/Pages/"
    --self.luaBinderPrefix = "UI/Binders/"
    self.luaUIModulesPathPrefix = "UI/ModulePages/"
end

---@class UIConfigPage 界面配置
---@field mode string
---@field uiType string
---@field assetName string
---@field assetNameRelative string
---@field luaPath string
---@field luaPathRelative string
---@field binderPath string
---@field checkerName string 如果Page指定要进行的checkerName，则执行checkerName对应的检查器，检查器可通过UIMgr进行注册。可执行一些同步、异步检查，比如检查本地数据或者检查服务器校验是否通过等。如果没有定义checkName则直接打开。
---@field binderByName boolean
---@field layer number
---@field planeDistance number
local UIConfigPage = class("UIConfigPage")

---@type UIEnums
local UIEnums = require("LuaModules.UILib.Enums.UIEnums")

---ctor
---@param sourceConfigTable table
function UIConfigPage:ctor(...)
    local sourceConfigTable = nil
    self.pageName, sourceConfigTable = ...
    if sourceConfigTable then
        self.uiType = sourceConfigTable.uiType
        self.mode = sourceConfigTable.mode

        self.assetName = sourceConfigTable.assetName
        self.assetNameRelative = sourceConfigTable.assetNameRelative

        self.luaPath = sourceConfigTable.luaPath
        self.luaPathRelative = sourceConfigTable.luaPathRelative

        self.binder = sourceConfigTable.binder
        self.binderPath = sourceConfigTable.binderPath
        
        self.checkerName = sourceConfigTable.checkerName

        if sourceConfigTable.layer then
            self.layer = sourceConfigTable.layer
        else
            self.layer = 1
        end
        if sourceConfigTable.planeDistance then
            self.planeDistance = sourceConfigTable.planeDistance
        else
            self.planeDistance = 1
        end
    else
        self.uiType = UIEnums.PageType.stack
        self.mode = UIEnums.PageMode.coexist

        self.assetName = nil
        self.assetNameRelative = nil

        self.luaPath = nil
        self.luaPathRelative = nil

        self.binder = false
        self.binderPath = nil

        self.layer = 1

        self.planeDistance = 1
        
        self.checkerName = nil
    end
end
--[[
---@param path string
---@param uiConfig UIConfig
function UIConfigPage:getBinder(pageName, uiConfig)
    local binder = nil
    if self.binder and uiConfig.paths.luaBinderPrefix ~= nil then
        binder = require(uiConfig.paths.luaBinderPrefix .. pageName .. "Binder")
    end

    if binder == nil and self.binderPath ~= nil then
        binder = require(self.binderPath)
    end

    return binder
end
]]
---@param path string
---@param uiConfig UIConfig
function UIConfigPage:getAssetPath(pageName, uiConfig)
    if self.assetName then
        return self.assetName .. ".prefab"
    elseif self.assetNameRelative then
        return uiConfig.paths.assetPathPrefix .. self.assetNameRelative .. ".prefab"
    else
        return uiConfig.paths.assetPathPrefix .. pageName .. ".prefab"
    end
end

---@param path string
---@param uiConfig UIConfig
function UIConfigPage:generatePageCtrl(pageName, uiConfig)
    if self.luaPath then
        return require(self.luaPath).new()
    elseif self.luaPathRelative then
        return require(uiConfig.paths.luaPathPrefix .. self.luaPathRelative).new()
    else
        return require(uiConfig.paths.luaPathPrefix .. pageName).new()
    end
end

---@class UIConfig 总配置结构
---@field basics UIConfigBasic
---@field paths UIConfigPath
---@field auxiliaries table<string,string>
---@field pages table<string,UIConfigPage>
local UIConfig = class("UIConfig")

function UIConfig:ctor(...)
    ---@type UIConfigBasic
    self.basics = UIConfigBasic.new()
    ---@type UIConfigPath
    self.paths = UIConfigPath.new()
    ---@type table<string,string>
    self.auxiliaries = {}
    ---@type table<string,UIConfigPage>
    self.pages = {}
end

UIConfig.UIConfigPage = UIConfigPage

---getPageConfig
---@param pageName string
---@return UIConfigPage
function UIConfig:getPageConfig(pageName)
    return self.pages[pageName]
end

return UIConfig