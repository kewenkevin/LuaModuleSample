--- 界面管理器
--- Generated by EmmyLua(https://github.com/EmmyLua)
---------------------------------------------------------------------------------------
--- Example:
---========================================config=============================================
---
--- --基础参数
--- config.basics.cullingMask = 32
--- config.basics.orderOutCount = 1
--- --路径信息
--- config.paths.assetPathPrefix = "Assets/ResourceBuild/ResourcesAssets/Artist/UI/Pages/"
--- config.paths.luaPathPrefix = "UI/Pages/"
--- --附加组件（可选）
--- config.auxiliaries.Network = "UI/Auxiliary/Network"
--- config.auxiliaries.reward = "UI/Auxiliary/Reward"
---
--- --界面配置
--- ---读表法 --------------------------------------------------------------------------
---
--- local sourceConfig = require("UI.Config")
--- local pages = sourceConfig.pages
--- for k, v in pairs(pages) do
---     config.pages[k] = UIConfig.UIConfigPage.new(v)
--- end
---
--- ---自定义界面处理---------------------------------------------------------------------
---
--- ---Example1 
--- config.pages.PlayerInfoPanel = UIConfig.UIConfigPage.new()
--- config.pages.PlayerInfoPanel.uiType = UIEnums.PageType.stack
--- config.pages.PlayerInfoPanel.mode = UIEnums.PageType.coexist
---
--- ---Example2
--- config.pages.PlayerInfoPanel = UIConfig.UIConfigPage.new({uiType = UIEnums.PageType.stack,mode = UIEnums.PageType.coexist})
---
----------------------------------------------------------------------------------------
--- return config
---
---========================================initialize========================================
---
--- local UIMgr = require ("LuaModules.UILib.UIMgr").new()
---
--- ---require("LuaModules.UILib.Base.UIAssetHelper")可以被继承，自己实现加卸载资源管理
--- UIMgr:registerAssetHelperClass(require("LuaModules.UILib.Base.UIAssetHelper"))
---
--- ---config 初始化见上一个部分
--- UIMgr:initialize(require("UI.ConfigV2"))
---
---=========================================usage===========================================
---
--- --打开
--- UIMgr:open("Login",nil,function(result)
---
--- end)
---
--- --关闭
--- UIMgr:close("Login",nil,function(result)
---
--- end)
---
--------------------------------------------------------------------------------------------------------------------------------------------------------------

---@type UIDataStorageFactory
--local UIDataStorageFactory = require("LuaModules.UILib.Base.UIDataStorageFactory")
---@type UIPageHandler
local UIPageHandler = require("LuaModules.UILib.Base.UIPageHandler")
---@type UIEnums UI所有枚举
local UIEnums = require("LuaModules.UILib.Enums.UIEnums")

---@type StackType 栈式UI组 
local StackType = require("LuaModules.UILib.UIType.StackType")
---@type OrderType 队列UI组
local OrderType = require("LuaModules.UILib.UIType.OrderType")
---@type UniqueType 唯一UI组（不可堆叠）
local UniqueType = require("LuaModules.UILib.UIType.UniqueType")
---@type FreedomType 自由UI组（可自由堆叠）
local FreedomType = require("LuaModules.UILib.UIType.FreedomType")


require("LuaModules.UILib.Base.UIBase")
---@type UIPageBase
require("LuaModules.UILib.Base.PageBase")
---@type UIModuleBase
require("LuaModules.UILib.Base.ModuleBase")

--------------------------------------------------------------------------------------------------------------------------------------------------------------

local Canvas = UnityEngine.Canvas
local GraphicRaycaster = UnityEngine.UI.GraphicRaycaster

--------------------------------------------------------------------------------------------------------------------------------------------------------------


---@class UIManager : EventDispatcher
---@field private _uiConfig UIConfig
---@field private _rootTrans UnityEngine.Tansform
---@field private _rootCamera UnityEngine.Camera
---@field private _groupsByMode table<string,UITypeBase>
---@field private _auxiliaries table<string,UIAuxiliaryBase>
---@field public assetHelper UIAssetHelper
---@field private _dataStore DataStore
---@field private _pageChecker table<string, function>
---@field private _touchDisableIdentifiers table<string>
local UIManager = class("UIManager", require("LuaModules.Event.EventDispatcher"))

G_DEFINE_UI_LUA_BIND_MODE = 1

--region 初始化
---ctor
function UIManager:ctor()
    self._uiConfig = nil
    self._layerGroup = {}
    self._groupsByMode = {}
    self._auxiliaries = {}
    self._dataStore = nil
    ---@field _pageChecker 已注册的页面检查器
    self._pageChecker = {}
    ---@field _touchDisableIdentifiers 已注册的禁用点击的标识符
    self._touchDisableIdentifiers = {}
    
    ---@field _pageHandlers table <layer,UIPageHandlerArray>当前管理中的pageHandlers
    self._pageHandlers = {}
    ---@field _pageHandlersSortedKeys Array 缓存排序后的_pageHandlers的keys
    self._pageHandlersSortedKeys = nil
    ---@field _groupPageHandlers table <PageType,UIPageHandlerArray> 当前管理中的pageHandlers
    self._groupPageHandlers = {}
    
    UIManager.super.ctor(self)
end

---initialize 通过config 初始化UI管理器 
---@param config UIConfig
---@param dataStore DataStore
function UIManager:initialize(config, dataStore)
    self._uiConfig = config
    self._dataStore = dataStore
    G_DEFINE_UI_LUA_BIND_MODE = self._uiConfig.basics.bindMode
    --self:_setupDataStorageFactory()
    
    self:_createPageGroups()
    self:_createPageHandlerGroups()
    self:_createAuxiliaries()
    self:_checkWrapType()
end

---_createAuxiliaries 创建配置中配置的辅助对象，会随UI系统一起Update，所有Update晚于UI的界面的Update
---@private
function UIManager:_createAuxiliaries()
    for _, auxiliaryPath in pairs(self._uiConfig.auxiliaries) do
        self._auxiliaries[#self._auxiliaries + 1] = require(auxiliaryPath).new()
    end
end

---_createPageGroups 创建界面管理组，共四个组，具体参考下面四个Type
---@private
function UIManager:_createPageGroups()
    ---@type StackType
    self._groupsByMode[UIEnums.PageType.stack] = StackType.new(self, self._uiConfig.basics)
    ---@type OrderType
    self._groupsByMode[UIEnums.PageType.order] = OrderType.new(self, self._uiConfig.basics)
    ---@type FreedomType
    self._groupsByMode[UIEnums.PageType.freedom] = FreedomType.new(self, self._uiConfig.basics)
    ---@type UniqueType
    self._groupsByMode[UIEnums.PageType.unique] = UniqueType.new(self, self._uiConfig.basics)
end

function UIManager:_createPageHandlerGroups()
    ---@type StackType_UIPageHandler[]
    self._groupPageHandlers[UIEnums.PageType.stack] = {}
    ---@type OrderType_UIPageHandler[]
    self._groupPageHandlers[UIEnums.PageType.order] = {}
    ---@type FreedomType_UIPageHandler[]
    self._groupPageHandlers[UIEnums.PageType.freedom] = {}
    ---@type UniqueType_UIPageHandler[]
    self._groupPageHandlers[UIEnums.PageType.unique] = {}
end
--[[
---_setupDataStorageFactory
function UIManager:_setupDataStorageFactory()
    UIDataStorageFactory.luaUIModulesPathPrefix = self:getUIConfig().paths.luaUIModulesPathPrefix
end
]]
---_checkWrapType 检查必需依赖的LuaWrap是否被Wrap过
---@private
function UIManager:_checkWrapType()
    if GraphicRaycaster == nil then
        error("dont wrap UnityEngine.UI.GraphicRaycaster")
    end
    if Canvas == nil then
        error("dont wrap UnityEngine.Canvas")
    end
end
--endregion

---addChild internal 添加节点到UI根节点下
---@param transform UnityEngine.Transform
---@param layer int 目标渲染层级
function UIManager:addChild(transform, layer)
    local targetParent = self._rootTrans
    if layer ~= nil and layer > 1 then
        if not self._layerGroup[layer] then
            self._layerGroup[layer] = self:_addLayerTransform(layer)
        end
        targetParent = self._layerGroup[layer]
    end
    transform:SetParent(targetParent, false)
end

---registerAssetHelperClass 注册一个AssetHelper的class给UI管理器，UI管理器通过AssetHelper来创建和删除UI所需GameObject对象
---@param assetHelperClass Class
function UIManager:registerAssetHelperClass(assetHelperClass)
    self.assetHelper = assetHelperClass
end

---setUIRoot 设置UIRoot
---@param uiRootTrans 
function UIManager:setUIRoot(uiRootGObj)
    local rootTransform = uiRootGObj.transform
    self._rootTrans = rootTransform:Find("RootCanvas")
    if self._rootTrans == nil then
        error("UIRoot not found RootCanvas")
    end
    self._rootCanvas = self._rootTrans:GetComponent(typeof(UnityEngine.Canvas))

    local uiCameraTransform = rootTransform:Find("UICamera")
    if uiCameraTransform ~= nil then
        self._rootCamera = uiCameraTransform:GetComponent(typeof(UnityEngine.Camera))
    else 
        warn("UIRoot not found UICamera")
    end
    
    self._graphicRaycaster = self._rootTrans:GetComponent(typeof(GraphicRaycaster))
    local touchMaskTrans = self._rootTrans:Find("TouchMaskCanvas")
    if touchMaskTrans == nil then
        warn("UIRoot not found touchMaskTrans")
    else
        self._touchMaskCanvas = touchMaskTrans:GetComponent(typeof(UnityEngine.Canvas))
    end
    
    UnityEngine.Object.DontDestroyOnLoad(uiRootGObj)
end

---setUIRoot 设置UIRoot
---@param uiCameraTransform 
function UIManager:setUICamera(uiCameraTransform)
    if uiCameraTransform == nil then
        error("not found UICamera")
    end

    self._rootCamera = uiCameraTransform:GetComponent(typeof(UnityEngine.Camera))
end

---setTouchMaskLayer 设置点击遮罩节点的层级
---@param layer number
function UIManager:setTouchMaskLayer(layer)
    if self._touchMaskCanvas == nil then
        return
    end
    self._touchMaskCanvas.sortingOrder = layer
end

---open 打开界面，具体的策略由策略类实现
---@param pageName string
---@param options table
---@param callback function function(bool)
function UIManager:open(pageName, options, callback)
    local pageConfig = self:getPageConfig(pageName)
    if pageConfig == nil then
        if callback ~= nil then
            safeCall(function ()
                callback(false)
            end) 
        end
        error("UIManager:open failed, dont has this pageName:" .. pageName)
        return
    end
 
    if pageConfig.uiType == nil then
        if callback ~= nil then
            safeCall(function ()
                callback(false)
            end)
        end
        error("UIManager:open failed, dont has this uiType:" .. pageName)
        return
    end
  
    if pageConfig.uiType ~= UIEnums.PageType.order and self:getPageState(pageName) == UIEnums.PageStatus.opening then
        if callback ~= nil then
            safeCall(function ()
                callback(false)
            end)
        end
        warn("UIManager:open failed, target page is opening:" .. pageName)
        return
    end
 
    self.assetHelper.onOpening(pageConfig.uiType, pageName)
 
    local checkerCallback = function(result)
        if result == nil or result then
            self:onCheckFinished(pageName, options, pageConfig, callback)
        else
            if callback ~= nil then
                safeCall(function ()
                    callback(false)
                end, "UIManager:checkerCallback failed，page open callback has error:")
            end
        end
    end

    if pageConfig.checkerName ~= nil and self._pageChecker[pageConfig.checkerName] ~= nil then
        local checkerFunc = self._pageChecker[pageConfig.checkerName]
        local successCall = safeCall(function ()
            checkerFunc(pageName, options, checkerCallback)
        end, "UIManager:checker failed，page checkerFunc has error:")

        if not successCall then
            -- checkerFunc抛出异常时默认是检查失败了
            checkerCallback(false)
        end
    else
        checkerCallback(true)
    end
end

---onCheckFinished 页面检查完毕回调
---@param pageName string
---@param options table
---@param pageConfig UIConfigPage
---@param callback function(boolean)
function UIManager:onCheckFinished(pageName, options, pageConfig, callback)
    self._groupsByMode[pageConfig.uiType]:open(pageName, options, function(result)
        self.assetHelper.onOpened(pageConfig.uiType, pageName, result)
        if callback ~= nil then
            safeCall(function ()
                callback(result)
            end, "UIManager:onCheckFinished failed，page open callback has error:")
        end
    end)
end

---update 更新入口
function UIManager:update()
    for _, handlerArray in pairs(self._pageHandlers) do
        for _, handler in pairs(handlerArray) do
            if handler ~= nil and handler.pageScript
                    and handler.pageScript.onUpdate
                    and (handler.status == UIEnums.PageStatus.opened
                    or handler.status == UIEnums.PageStatus.shown) then
                handler.pageScript:onUpdate()
            end
        end
    end

    for _, v in pairs(self._auxiliaries) do
        v:update()
    end
end

---canBack 栈类型界面导航栈可否回退
function UIManager:canBack()
    return self._groupsByMode[UIEnums.PageType.stack]:canBack()
end

---back 栈类型界面导航栈回退
---@param options table 参数
function UIManager:back(options)
    self._groupsByMode[UIEnums.PageType.stack]:back(options)
end

---backTo 栈类型界面导航栈回退到目标界面
---@param pageName string 目标页面名称
function UIManager:backTo(pageName)
    if pageName == nil then
        error("UIManager:backTo failed, pageName is nil")
        return
    end
    local backCount = 0
    local success = self:_traversalGroupPageHandler(UIEnums.PageType.stack,function (pageHandler)
        if pageHandler.pageConfigName == pageName then
            return true
        end
        backCount = backCount + 1
    end)
    if success then
        local stackGroup = self._groupsByMode[UIEnums.PageType.stack]
        for i = 1, backCount, 1 do
            stackGroup:back()
        end
    else
        warn("UIManager:backTo failed, page not found: "..pageName)
    end
end

---canGlobalBack top 界面是否可回退
---@return 业务层自定义table
function UIManager:canGlobalBack()
    local targetPageHandler = self:_getPageHandlerTop()
    if targetPageHandler == nil then
        return nil
    end
    if targetPageHandler.pageScript.canClose ~= nil then
        return targetPageHandler.pageScript.canClose()
    end
    return nil
end

---back 全局界面回退，按照显示顺序优先级来
---@param options table 参数
function UIManager:globalBack(options)
    local targetPageHandler = self:_getPageHandlerTop()
    if targetPageHandler == nil then
        warn("UIManager:back failed, targetPageHandler is nil")
        return
    end
    self:close(targetPageHandler.pageConfigName, options)
end

---getPageConfig 获取界面配置
---@param pageName string
---@return UIConfigPage
function UIManager:getPageConfig(pageName)
    return self._uiConfig:getPageConfig(pageName)
end

---getUIConfig 获取所有UI系统的配置
---@return UIConfig
function UIManager:getUIConfig()
    return self._uiConfig
end

---getDataSore 获取全局数仓
function UIManager:getDataSore()
    return self._dataStore    
end


---enableTouchable 开启界面操作
---@param identifier string
function UIManager:enableTouchable(identifier)
    if identifier == nil then
        identifier = "default"
    end
    if self._touchMaskCanvas == nil then
        return
    end
    self._touchDisableIdentifiers[identifier] = nil
    local identifierCount = 0
    for _, state in pairs(self._touchDisableIdentifiers) do
        if state ~= nil then
            identifierCount = identifierCount + 1 
        end
    end
    if identifierCount == 0 then
        self._touchMaskCanvas.enabled = false 
    end
end

---disableRaycaster 关闭界面操作
---@param identifier string
function UIManager:disableTouchable(identifier)
    if identifier == nil then
        identifier = "default"
    end
    if self._touchMaskCanvas == nil then
        return
    end
    self._touchDisableIdentifiers[identifier] = true
    self._touchMaskCanvas.enabled = true
end

---getUICamera 获取UI相机
function UIManager:getUICamera()
    return self._rootCamera;
end

---getUIRootCanvas 获取根节点Canvas
function UIManager:getUIRootCanvas()
    return self._rootCanvas;
end

---isStackTop 判断pageName页面是否是栈顶页面
---@param pageName string
function UIManager:isStackTop(pageName)
    local topPageHandler = self:_getGroupPageHandler(UIEnums.PageType.stack)
    if topPageHandler == nil then
        return false
    end
    return topPageHandler.pageConfigName == pageName
end

---isStackTop 判断pageName页面是否是显示顶层页面
---@param pageName string
function UIManager:isShowTop(pageName)
    local showTopPageHandler = self:_getPageHandlerTop()
    if showTopPageHandler == nil then
        return false
    end
    return showTopPageHandler.pageConfigName == pageName
end

---isStackTop 判断pageName页面是否正在显示
---@param pageName string
function UIManager:isShowing(pageName)
    local pageConfig = self:getPageConfig(pageName)
    if pageConfig == nil then
        return self._groupsByMode[UIEnums.PageType.stack]:isShowing(pageName)
    else
        return self._groupsByMode[pageConfig.uiType]:isShowing(pageName)
    end
end


---close 关闭一个界面
---@param pageName string 界面名称
---@param options table 参数
function UIManager:close(pageName, options)
    local pageConfig = self:getPageConfig(pageName)
    if pageConfig == nil then
        self._groupsByMode[UIEnums.PageType.stack]:close(pageName, options)
    else
        self._groupsByMode[pageConfig.uiType]:close(pageName, options)
    end
end

---closeAllExclude 关闭全部UI除了指定的Page例外，
---栈类型界面导航栈回退到栈底页面
---@param excludePageNames string[] 要排除的UI 名称
function UIManager:closeAllExclude(excludePageNames)
    ---@param group UITypeBase
    for _, group in pairs(self._groupsByMode) do
        group:closeAllExclude(excludePageNames)
    end
end

---show 显示一个界面（栈类型、队列类型、唯一类型下通常情况下不需要使用，如果是自由类型或者有特殊需求才有使用情景）
---@param pageName string 界面名称
---@param options table 参数
function UIManager:show(pageName, options)
    local pageConfig = self:getPageConfig(pageName)
    if pageConfig == nil then
        error("dont has this pageName:" .. pageName)
        return
    end
    self._groupsByMode[pageConfig.uiType]:show(pageName, options)
end

---hide 隐藏一个界面（栈类型下、队列类型、唯一类型通常情况下不需要使用，如果是自由类型或者有特殊需求才有使用情景）
---@param pageName string 界面名称
---@param options table 参数
function UIManager:hide(pageName, options)
    local pageConfig = self:getPageConfig(pageName)
    if pageConfig == nil then
        error("dont has this pageName:" .. pageName)
        return
    end
    self._groupsByMode[pageConfig.uiType]:hide(pageName, options)
end

---destroy 销毁一个界面
---@param pageName string 界面名称
---@param options table 参数
function UIManager:destroy(pageName, options)
    local pageConfig = self:getPageConfig(pageName)
    if pageConfig == nil then
        self._groupsByMode[UIEnums.PageType.stack]:destroy(pageName, options)
    else
        self._groupsByMode[pageConfig.uiType]:destroy(pageName, options)
    end
end

---attach 向当前栈顶界面附加一个界面
---@param pageName string 界面名称
---@param options table 参数
function UIManager:attach(pageName)
    self._groupsByMode[UIEnums.PageType.stack]:attach(pageName)
end

---registerUIChecker 示例：
---======================项目中集中管理检查器======================
---local levelChecker = function(pageName, options, callback)
---     local conditionValid = true
---     if pageConditionCfg[pageName] ~= nil and store.player.Level < pageConditionCfg[pageName].levelLimit then
---         conditionValid = false
---     end
---     if options.previewMode then
---         conditionValid = true
---     end
---     if callback ~= nil then
---         callback(conditionValid)
---     end
---end
---======================向UIMgr中注册检查器======================
---UIMgr:registerUIChecker("demoCheck", levelChecker)
---==================UIConfigPage中指定使用检查器==================
---["StackTest1"] = { checkerName = "levelChecker" }
---或者
---pageConfig.checkerName = "levelChecker"
---@param checkerName string
---@param checkerFunc function(pageName, openOptions, callback(boolean))
function UIManager:registerUIChecker(checkerName, checkerFunc)
    if self._pageChecker[checkerName] ~= nil then
        warn("UIManager registUIChecker failed, checkName repeted: " , checkerName)
        return
    end
    if checkerFunc == nil then
        warn("UIManager registUIChecker failed, checkerFunc is nil: " , checkerName)
        return
    end
    self._pageChecker[checkerName] = checkerFunc
end

---pageInfo  获取界面的状态
---@param group string 组名
---@param pageName string 界面名
---@return string
function UIManager:getPageState(pageName)
    local status = UIEnums.PageStatus.notExist
    local pageConfig = self:getPageConfig(pageName)
    if pageConfig == nil then
        error("dont has this pageName:" .. pageName)
        return status
    end
    if self._groupsByMode[pageConfig.uiType] ~= nil then
        status = self._groupsByMode[pageConfig.uiType]:getPageState(pageName)
    end
    return status
end

---getComponentByUrl 通过链接获取到目标组件（只支持获取UnityEngine.Object对象，LuaTable对象会禁止访问）
---@param url string 形如Login.Y_BackGround.RawImage
function UIManager:getComponentByUrl(url)
    local splitsUrl = self:_splitUrl(url);

    local currentPath = ""
    local currentHandler = nil
    for i = 1, #splitsUrl do
        if i == 1 then
            local pageName = splitsUrl[1]
            local pageConfig = self:getPageConfig(pageName)

            local curPageScript = nil
            if pageConfig ~= nil then
                local uiType = UIEnums.PageType.stack
                uiType = pageConfig.uiType
                local success = self:_traversalGroupPageHandler(uiType,function (pageHandler)
                    if pageHandler.pageConfigName == pageName and pageHandler.pageScript ~= nil  and pageHandler.status >= UIEnums.PageStatus.opened and
                            pageHandler.status <= UIEnums.PageStatus.hided then
                        curPageScript = pageHandler.pageScript
                        return true
                    end
                end)
            else
                warn("UIMgr:getComponentByUrl","this page is not found in config")
                return nil
            end

            if curPageScript == nil then
                warn("UIMgr:getComponentByUrl","this page is not get able")
                return nil
            else
                currentHandler = curPageScript
                currentPath = pageName
            end
        else
            local key = splitsUrl[i]
            local index = nil

            local foundArrayIndex,lastIndex = string.find(key,"%[.+%]")
            if foundArrayIndex then
                local keyFront = string.sub(key,1,foundArrayIndex-1)
                local keyEnd = string.sub(key,foundArrayIndex+1,lastIndex-1)
                key = keyFront
                index = tonumber(keyEnd)
                if index == nil then
                    warn( "UIMgr:getComponentByUrl","format error ".. url.." not available" )
                    return nil
                end
            end

            local foundInModule = false
            if type(currentHandler) == "table" then
                if currentHandler.modules then
                    local next = currentHandler.modules[key]
                    if next ~=nil then
                        currentHandler = next
                        currentPath = currentPath.."."..key
                        foundInModule = true
                    end
                end

                if not foundInModule and currentHandler.comps then
                    local next = currentHandler.comps[key]
                    if next ~= nil then
                        currentHandler = next
                        currentPath = currentPath.."."..key
                        foundInModule = true
                    end
                end
            end

            if not foundInModule then
                if currentHandler[key] ~= nil then
                    currentHandler = currentHandler[key]
                    currentPath = currentPath.."."..key
                else
                    warn("UIMgr:getComponentByUrl","not found url at "..currentPath.."."..key)
                    return nil
                end
            end

            if foundInModule and index~= nil then
                local indexItem = currentHandler[index]
                if indexItem ~= nil then
                    currentHandler = indexItem
                    currentPath = currentPath.."["..index.."]"
                else
                    warn("UIMgr:getComponentByUrl","not found url at "..currentPath.."["..index.."]")
                    return nil
                end

            end
        end
    end

    if type(currentHandler) == "table" then
        print("UIMgr:getComponentByUrl","access denied , no access authority "..currentPath.." cause it's not just a UnityEngine.Object")
        return nil
    end

    print("UIMgr:getComponentByUrl","success find url "..currentPath)
    return currentHandler
end

---addLayerCanvas
---@private
---@param layer int
function UIManager:_addLayerTransform(layer)
    local layerTrans = UnityEngine.GameObject.New(layer.."_LayerCanvas").transform
    layerTrans:SetParent(self._rootTrans, false)
    layerTrans.gameObject.layer = self._rootTrans.gameObject.layer

    layerTrans = layerTrans.gameObject:AddComponent(typeof(UnityEngine.RectTransform))
    layerTrans.anchorMin = Vector2(0, 0)
    layerTrans.anchorMax =  Vector2(1, 1)
    layerTrans.pivot = Vector2(0.5, 0.5)
    layerTrans.sizeDelta = Vector2(0, 0)

    local layerCanvas = layerTrans.gameObject:AddComponent(typeof(Canvas))
    layerCanvas.renderMode = UnityEngine.RenderMode.ScreenSpaceCamera
    layerCanvas.worldCamera = self._rootCamera
    layerCanvas.overrideSorting = true
    layerCanvas.sortingOrder = layer

    layerTrans.gameObject:AddComponent(typeof(GraphicRaycaster))

    return layerTrans
end

---addPageHandlerToGroup 注册Handler(对业务隐藏)
---@param pageHandler table
---private
function UIManager:_addPageHandlerToGroup(pageHandler)
    if pageHandler == nil then
        error("addPageHandlerToGroup failed, pageHandler is nil")
    end
    local pageConfig = self:getPageConfig(pageHandler.pageConfigName)
    if pageConfig == nil then
        error("page config not exist: " .. pageHandler.pageConfigName)
    end
    if self._pageHandlers[pageConfig.layer] == nil then
        self._pageHandlers[pageConfig.layer] = {}
    end
    local layerHandlerArray = self._pageHandlers[pageConfig.layer]
    local pageTypeHandlerArray = self._groupPageHandlers[pageConfig.uiType]

    table.insert(layerHandlerArray, pageHandler)
    table.insert(pageTypeHandlerArray, pageHandler)

    self._pageHandlersSortedKeys = nil
end

---removePageHandlerFromGroup 从管理的PageHandler中移除最近一个被发现的Handler（对业务隐藏）
---@param pageConfigName string
---private
function UIManager:_removePageHandlerFromGroup(pageConfigName)
    local pageConfig = self:getPageConfig(pageConfigName)
    if pageConfig == nil then
        error("page config not exist: " .. pageConfigName)
    end

    local layerHandlerArray = self._pageHandlers[pageConfig.layer]
    for i = #layerHandlerArray, 1, -1 do
        if layerHandlerArray[i].pageConfigName == pageConfigName then
            table.remove(layerHandlerArray, i)
            break
        end
    end

    local pageTypeHandlerArray = self._groupPageHandlers[pageConfig.uiType]
    for i = #pageTypeHandlerArray, 1, -1 do
        if pageTypeHandlerArray[i].pageConfigName == pageConfigName then
            table.remove(pageTypeHandlerArray, i)
            break
        end
    end
end

---traversalGroupPageHandler 逆序遍历分策略组的PageHandler（对业务隐藏）
---@param pageType PageType
---@param lookFunc function(UIPageHandler):boolean
---@return boolean 是否找到目标
---private
function UIManager:_traversalGroupPageHandler(pageType, lookFunc)
    local handlers = self._groupPageHandlers[pageType]
    local pageHandler = nil
    for i = #handlers, 1, -1 do
        pageHandler = handlers[i]
        if lookFunc(pageHandler) then
            return true
        end
    end

    return false
end

---getGroupPageHandler 获取分策略组的PageHandler（对业务隐藏）
---@param pageType PageType
---@param invertedIndex number 逆序的索引（从1开始）
---private
function UIManager:_getGroupPageHandler(pageType, invertedIndex)
    local handlers = self._groupPageHandlers[pageType]
    if #handlers < 1 then
        return nil
    end
    local maxLength = #handlers
    if invertedIndex == nil then
        invertedIndex = 1
    elseif invertedIndex > maxLength then
        return nil
    end
    local backCount = invertedIndex - 1
    return handlers[maxLength - backCount]
end

---getGroupPageHandlerCount 获取分策略组的PageHandler数量（对业务隐藏）
---@param pageType PageType
---private
function UIManager:_getGroupPageHandlerCount(pageType)
    local handlers = self._groupPageHandlers[pageType]
    return #handlers
end

---getPageHandlerTop 获取显示的最顶层页面
---private
function UIManager:_getPageHandlerTop()
    local allLayers = self._pageHandlersSortedKeys
    if allLayers == nil then
        for layer, _ in pairs(self._pageHandlers) do
            if allLayers == nil then
                allLayers = {}
            end
            allLayers[#allLayers + 1] = layer
        end
        --默认就是升序
        table.sort(allLayers)
        self._pageHandlersSortedKeys = allLayers
    end
    local targetLayerIndex = #allLayers
    local layerHandlerArray = self._pageHandlers[allLayers[targetLayerIndex]]
    while #layerHandlerArray < 1 do
        --找下一层
        targetLayerIndex = targetLayerIndex - 1
        if targetLayerIndex < 1 then
            warn("UIManager:getPageHandlerTop failed, no pages were found.")
            return nil
        end
        layerHandlerArray = self._pageHandlers[allLayers[targetLayerIndex]]
    end
    --直到找到非空的一层
    return layerHandlerArray[#layerHandlerArray]
end

---splitUrl 对URL进行分割，获得分割后的分词
---@param szFullString string 形如Login.Y_BackGround.RawImage
---private
function UIManager:_splitUrl(szFullString)
    local nFindStartIndex = 1
    local nSplitIndex = 1
    local nSplitArray = {}
    while true do
        local nFindLastIndex = string.find(szFullString, "%.", nFindStartIndex)
        if not nFindLastIndex then
            nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
            break
        end
        nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
        nFindStartIndex = nFindLastIndex + 1
        nSplitIndex = nSplitIndex + 1
    end
    return nSplitArray
end


return UIManager