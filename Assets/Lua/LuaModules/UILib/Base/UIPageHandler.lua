--- 界面管理包装器
--- 由于界面的lua需要进行绑定，这里存在异步加载，管理器对界面管理需要前置创建，故加此中间层对象，管理器操作该对象，该对象操作实际的PageBase对象
--- Generated by EmmyLua(https://github.com/EmmyLua)
---------------------------------------------------------------------------------------

---@type UIEnums
local UIEnums = require("LuaModules.UILib.Enums.UIEnums")

local Canvas = UnityEngine.Canvas
local GraphicRaycaster = UnityEngine.UI.GraphicRaycaster

---@class UIPageHandler
---@field pageConfigName string 页面在Config中的名称
---@field assetName string
---@field pageScript UIPageBase
---@field config UIConfigPage
---@field status string
---@field gameObject UnityEngine.GameObject
---@field canvas UnityEngine.Canvas
---@field graphicRaycaster UnityEngine.UI.GraphicRaycaster
---@field index number
local UIPageHandler = class("UIPageHandler")

---ctor
---@param pageConfigName string
---@param uiManager UIManager
function UIPageHandler:ctor(pageConfigName, uiManager)
    self.uiManager = uiManager
    self.pageConfigName = pageConfigName

    local uiConfig = self.uiManager:getUIConfig()

    self.config = self.uiManager:getPageConfig(pageConfigName)
    self.assetName = self.config:getAssetPath(pageConfigName, uiConfig)

    self:changePageStatus(UIEnums.PageStatus.opening)

    self.gameObject = nil

    self.index = 0
end

---instantiate
---@param assetHelper UIAssetHelper
---@param options table
function UIPageHandler:instantiate(callback,options)
    local this = self;
    self.uiManager.assetHelper.createUIObject(self.assetName, function(gameObject)
        if this.status == UIEnums.PageStatus.closed then
            this.uiManager.assetHelper.destroyUIObject(gameObject)
            callback(this)
        else
            this.gameObject = gameObject
            this.uiManager:addChild(this.gameObject.transform, self.config.layer)

            this:_setupUIExtension()
            this:_setupCtrl(options)

            callback(this)
        end
    end)
end

---destroy
---@param assetHelper UIAssetHelper
---@param options table
function UIPageHandler:destroy(options)
    if self.pageScript ~= nil then
        self.pageScript:destroy(options)
    end
    if self.gameObject ~= nil then
        self.uiManager.assetHelper.destroyUIObject(self.gameObject)
    end
    self:changePageStatus(UIEnums.PageStatus.notExist)
    self:removePageHandlerFromGroup()
end

function UIPageHandler:_setupUIExtension()
    local uiExpansion = nil
    if C_UIExpansion then
        uiExpansion = self.gameObject:GetComponent(typeof(C_UIExpansion))
    end

    if uiExpansion == nil then
        error("NFU Panel Bind","Not a Bindable GameObject, Please Add UIExpansion Component First")
    end

    if G_DEFINE_UI_LUA_BIND_MODE == 2 or nil == uiExpansion then
        --强制代码绑定方式 忽略资源绑定
        self.pageScript = self.config:generatePageCtrl(self.pageConfigName, self.uiManager:getUIConfig())
    elseif G_DEFINE_UI_LUA_BIND_MODE == 0 then
        --强制资源绑定模式
        self.pageScript = require(uiExpansion.LuaBindPath).new()
    else
        --灵活模式，资源绑定优先，代码次之
        local prefabPath = uiExpansion.LuaBindPath
        if prefabPath ~= nil and prefabPath ~= "" then
            self.pageScript = require(prefabPath).new()
        else
            self.pageScript = self.config:generatePageCtrl(self.pageConfigName, self.uiManager:getUIConfig())
        end

    end

    self.pageScript:setExpansion(uiExpansion)

end

function UIPageHandler:_setupCtrl(options)
    --local binder = self.config:getBinder(self.pageConfigName, self.uiManager:getUIConfig())
    self.pageScript:created(self.gameObject, self.config, --[[binder,]]self.uiManager,options)
    self:changePageStatus(UIEnums.PageStatus.created)
end

---changePageStatus 修改Page的状态
---@param targetStatus UIEnums.PageStatus
function UIPageHandler:changePageStatus(targetStatus)
    self.status = targetStatus
end

---setGameObjectActive 设置页面整体的激活状态
---@param active boolean
function UIPageHandler:setPageActive(active)
    if self.gameObject ~= nil then
        self.gameObject:SetActive(active)
    end
end

function UIPageHandler:open(options)
    if self.pageScript ~= nil then
        self.pageScript:open(options, self.uiManager)
    end
end

function UIPageHandler:show(options)
    if self.attached then
        for i, attachPageName in ipairs(self.attached) do
            self.uiManager:show(attachPageName)
        end
    end
    if self.pageScript ~= nil then
        self.pageScript:show(options)
    end
end

function UIPageHandler:hide(options)
    if self.attached then
        for i, attachPageName in ipairs(self.attached) do
            self.uiManager:hide(attachPageName)
        end
    end
    if self.pageScript ~= nil then
        self.pageScript:hide(options)
    end
end

function UIPageHandler:close(options)
    if self.attached then
        for i, attachPageName in ipairs(self.attached) do
            self.uiManager:close(attachPageName)
        end
        self.attached = nil
    end
    if self.pageScript ~= nil then
        self.pageScript:close(options)
    end
end

function UIPageHandler:canClose()
    if self.pageScript ~= nil and self.pageScript.canClose ~= nil then
        return self.pageScript:canClose()
    end
    return true
end

function UIPageHandler:afterOpen(options)
    if self.pageScript ~= nil then
        local withAnimation = false
        if options and options.withAnimation then
            withAnimation = true
        end
        self.pageScript:afterOpen(withAnimation, function()
            self:changePageStatus(UIEnums.PageStatus.shown)
        end, options)
    end
end

function UIPageHandler:addPageHandlerToGroup()
    self.uiManager:_addPageHandlerToGroup(self)
end

function UIPageHandler:removePageHandlerFromGroup()
    self.uiManager:_removePageHandlerFromGroup(self.pageConfigName)
end

return UIPageHandler